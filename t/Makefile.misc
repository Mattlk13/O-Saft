#!/usr/bin/make -rRf
#?
#? DESCRIPTION
#?      For more details please see
#?          ../Makefile  Makefile  Makefile.help  Makefile.pod
#?      make help.test.misc
#?
#? VERSION
#?      @(#) Makefile.misc 3.13 24/07/01 11:27:31
#?
#? AUTHOR
#?      18-apr-18 Achim Hoffmann
#?
# -----------------------------------------------------------------------------

HELP-help.test.misc = targets for misc. tests and development

_SID.misc          := 3.13

_MYSELF.misc       := t/Makefile.misc
ALL.includes       += $(_MYSELF.misc)
ALL.inc.type       += misc
ALL.help.tests     += help.test.misc

first-misc-target-is-default: help.test.misc

ifeq (,$(_SID.test))
    -include t/Makefile
endif

help.test.misc:       HELP_TYPE = misc
help.test.misc-v:     HELP_TYPE = misc
help.test.misc-vv:    HELP_TYPE = misc

#_____________________________________________________________________________
#________________________________________________________________ variables __|

# internal used tools and files (paths hardcoded!)
EXE.bench          := t/o-saft_bench.sh
EXE.test.bunt      := t/test-bunt.pl.txt
TEST.bench.host    := $(TEST.host)
TEST.bench.times   := $(TEST.logdir)/o-saft_bench.sh.times
TEST.bunt.log      := $(TEST.logdir)/test.bunt.log
TEST.args.misc     := +quit

TEST.opt.cloc      := \
	--force-lang=Perl,pl \
	--force-lang=make,cmd \
	--force-lang=make,inc \
	--force-lang=make,FQDN \
	--force-lang=AsciiDoc,pod \
	--force-lang=AsciiDoc,txt \
	--script-lang=make,make \
	--by-percent c
TEST.opt.dprofpp   :=
TEST.opt.nytprof   :=
EXE.wc             := wc
EXE.cloc           := cloc
EXE.cloc.filter    := cat
EXE.cloc.total     := $(TEST.dir)/cloc-total.awk
EXE.analyse        := perl-analyzer
EXE.analyse-output := perl-analyzer-output
EXE.dprofpp        := dprofpp
EXE.nytprof        := nytprofhtml
EXE.podchecker     := podchecker
EXE.graph-easy     := graph-easy
#   or depending on platform: vcg
EXE.graph-anno     := $(TEST.dir)/gen-graph-annotations.sh
EXE.graph-src      := $(TEST.dir)/gen-graph-sources.sh
EXE.graph-subs     := $(TEST.dir)/gen-graph-sub-calls.sh
#   vcg or xvcg needs to be build from vcg.tgz;
#   build requires imake and/or xmkmf and X11 header files; 
#   debian packages: libx11-dev xutils-dev

# summary variables (mainly used for INSTALL.sh)
_ALL.devtools.intern   += $(EXE.bench) $(EXE.test.bunt) $(EXE.cloc.total)
_ALL.devtools.extern   += ctags
_ALL.devtools.extern   += $(EXE.dprofpp) $(EXE.nytprof)  $(EXE.podchecker)
_ALL.devtools.extern   += $(EXE.analyse) $(EXE.analyse-output) $(EXE.cloc)
_ALL.devtools.extern   += $(EXE.graph-anno) $(EXE.graph-src) $(EXE.graph-subs)
_ALL.devtools.extern   += $(EXE.graph-easy) dot dotty xvcg xdot
_ALL.devmodules.extern += Data::Dumper   Debug::Trace File::Find Getopt::Simple
_ALL.devmodules.extern += Pod::Perldoc   Perl::Critic JSON   Tk::Pod
_ALL.devmodules.extern += Perl::Analyzer Text::MicroTemplate GraphViz Storable
_ALL.devmodules.extern += Devel::NYTProf Devel::DProf Devel::Size Devel::Trace 
_ALL.devmodules.optional   := Debug::LTrace Devel::CallTrace Devel::TraceCalls
#                         not used, but may be useful for debugging
# on some platforms Perl module GraphViz2 is also necessary

# libs and modules required for building openssl (used in install_openssl.sh)
# TODO: move to its own Makefile.openssl
_ALL.openssl.debian    += libidn11-dev  libsctp-dev libidn2-dev libkrb5-dev  libgmp-dev libzip-dev
_ALL.openssl.debian.mod+= libmodule-build-perl libnet-dns-perl libnet-libidn-perl libnet-libidn2-perl libmozilla-ca-perl
_ALL.openssl.alpine.mod+= perl-net-dns  perl-mozilla-ca  perl-net-libidn
_ALL.devmodules.openssl+= Module::Build Mozilla::CA Net::LibIDN Net::LibIDN2 Net::DNS

O-USR.dir  ?= usr

# cloc detect file types (language) on file extension primarily. Unfortunately
# some files have no extension and some extension fool cloc's detection. Hence
# special options should prefix to these files to detect them correctly.
# Unfortunately this would result in rebuilding $(ALL.src)  with sophisticates
# use of Make's  $(foreach..) and $(patsubst..) like:
#   _TEST.cloc.src += $(foreach src, $(filter t/Makefile.%,$(ALL.src)), \
#     $(patsubst t/Makefile%,--force-lang=make $(src),$(src)) \
#     )
#   _TEST.cloc.src += $(foreach src, $(filter usr/%_o-saft,$(ALL.src)), \
#     $(patsubst usr/%_o-saft,--force-lang="Bourne Shell" $(src),$(src)) \
#     )
#   ...
# Up to now (01/2024), cloc detects one file  usr/%_o-saft incorrectly as Ruby
# , not worth for more complicated code here ...
_TEST.cloc.src = $(sort $(ALL.src))
_TEST.cloc.hint= Ruby detected by cloc incorrectly, should be make

#_____________________________________________________________________________
#____________________________________________________________ various tests __|

HELP-_misc1         = ____________________________________________ testing misc. _
HELP-test.bench     = call '$(EXE.bench)' for some benchmarks
HELP-test.bench.log = call '$(EXE.bench)' and save result in '$(TEST.bench.times)'
HELP-test.bunt      = test '$(O-USR.dir)/bunt.pl' with sample file

HELP.misc           = $(O-NL)\
\# Make may return status code for any  qa.*  target, even the result is not$(O-NL)\
\# errorneous. The target  test.quality  is not part of '\$$(ALL.test.misc)'.

HELP.test.misc.all  = # no special documentation yet

bench: test.bench
test.bench:
	@$(O-TRACE.target)
	$(EXE.bench) $(TEST.bench.host)
	@echo "# use '$(MAKE_COMMAND) test.bench.log' to save result in '$(TEST.bench.times)'"
$(TEST.bench.times):
	@$(O-TRACE.target)
	@$(O-TRACE.target.log)
	$(EXE.bench) $(TEST.bench.host) >> $@
test.bench.log: $(TEST.bench.times)

test.bunt: $(EXE.test.bunt)
	@$(O-TRACE.target)
	-cat $(EXE.test.bunt) | $(O-USR.dir)/bunt.pl
$(TEST.bunt.log):
	@$(O-TRACE.target)
	@$(O-TRACE.target.log)
	-cat $(EXE.test.bunt) | $(O-USR.dir)/bunt.pl > $@
test.bunt.log: $(TEST.bunt.log)
# TODO: test.bunt.log should use testarg%log target

ALL.testmisc       := test.bench test.bunt
ALL.testmisc.log   := test.bench.log
ALL.test.misc.log  += test.bench.log

.PHONY: test.bench test.bench.log test.bunt

#_____________________________________________________________________________
#____________________________________ targets for development documentation __|

HELP-_docs      = ____________________________________ documentation targets _
HELP-docs.anno.%  = generate graph with defined and used annotations for one file
HELP-docs.subs.%  = generate graph with defined and used perl subroutines for one file
HELP-docs.anno  = generate graph with defined and used annotations
HELP-docs.subs  = generate graph with defined and used perl subroutines
HELP-docs.anno.all  = generate graph with defined and used annotations for all files
HELP-docs.subs.all  = generate graph with defined and used perl subroutines for all files

# generate graph fo a single source file
# quick&dirty without check if passed file exists, must be in /lib
docs.anno.%:
	@$(O-TRACE.target)
	@$(EXE.graph-anno) --dir=$(O-DOC.dir) --prefix=$(*)_  $(O-LIB.dir)/$(*)
docs.subs.%:
	@$(O-TRACE.target)
	@$(EXE.graph-subs) --dir=$(O-DOC.dir) --prefix=$(*)_  $(O-LIB.dir)/$(*)

ALL.docsanno    = $(O-LIB.pm:%=docs.anno.%)
ALL.docssubs    = $(O-LIB.pm:%=docs.subs.%)

# only one target, as it generates multiple files anyway
docs.anno:
	@$(O-TRACE.target)
	@$(EXE.graph-anno) --dir=$(O-DOC.dir) --prefix=$(O-Project)_ --make=e-ALL.src
	@$(EXE.graph-anno) --dir=$(O-DOC.dir) --prefix=$(SRC.pl)_    $(SRC.pl)
docs.annotations: docs.anno

# only one target, as it generates multiple files anyway
docs.subs:
	@$(O-TRACE.target)
	@$(EXE.graph-subs) --dir=$(O-DOC.dir) --prefix=$(O-Project)_ --make=e-ALL.pm
	@$(EXE.graph-subs) --dir=$(O-DOC.dir) --prefix=$(SRC.pl)_    $(SRC.pl)

ALL.testdocs   := docs.anno docs.subs $(ALL.docsanno) $(ALL.docssubs)

docs.anno.all: docs.anno $(ALL.docsanno)
docs.subs.all: docs.subs $(ALL.docssubs)

# TODO: ALL.testdocs.log : difficult, as generated files are unknown yet
# TODO: ALL.gen        += # ... files generated by docs.anno docs.subs

.PHONY: docs.anno docs.subs

#_____________________________________________________________________________
#__________________________________________________ targets for development __|

HELP-_wc        = ________________________________________ statistic targets _
HELP-test.wc    = count lines and bytes of code of all source files using '$(EXE.wc)'

HELP-_cloc      = ________________________________________ statistic targets _
HELP-cloc       = count lines of code of all source files; summary output
HELP-cloc.file  = count lines of code of all source files; output by file
HELP-cloc.lang  = same as cloc.file and cloc
HELP-cloc.csv   = same as cloc but output as comma separated values
HELP-cloc.total = same as cloc but added "total %" column
HELP-test-cloc  = all of the above
HELP-cloc.stat.log  = same as cloc but redirect to '$(_TEST.cloc.log)' also
# NOTE: also possible usage:
#       make cloc TEST.opt.cloc=--3
#       make cloc TEST.opt.cloc=--csv
#       make cloc TEST.opt.cloc=--xml
# NOTE: --quiet suppresses count of files also, hence not used by default

testarg-misc.wc::
	@$(O-TRACE.target)
	@echo "#make: $(HELP-test.wc) ..."
	@$(EXE.echo) "# lines\t  words\t   bytes\tfile"
	@$(EXE.echo) "#-------+--------+--------+-----------------------------"
	@wc $(ALL.src)
	@$(EXE.echo) "#-------+--------+--------+-----------------------------"
test.wc: testarg-misc.wc
test.wc.log: testarg-misc.wc.log
#ALL.test.misc.info.log := $(ALL.test.misc.info:%=%.log)
.PHONY: test.wc testarg.wc

cloc%:
	@$(O-TRACE.target)
	@$(EXE.cloc) $(TEST.opt.cloc) $(_TEST.cloc.src) | $(EXE.cloc.filter)
	@$(EXE.echo) "$(O-NL)# $(_TEST.cloc.hint)"

cloc.stat:  TEST.opt.cloc  +=
cloc.file:  TEST.opt.cloc  += --by-file
cloc.lang:  TEST.opt.cloc  += --by-file-by-lang
cloc.csv:   TEST.opt.cloc  += --csv --quiet
cloc.total: TEST.opt.cloc  += --csv --quiet
cloc.total: EXE.cloc.filter = $(EXE.cloc.total)
cloc:       cloc.stat

# cloc is ugly, writes to tty, hence we always get the output also, even
# if STDOUT and STDERR is redirected to a file
_TEST.cloc.log   = $(TEST.logdir)/test.cloc.stat.log
$(_TEST.cloc.log):
	@echo "# Makefile.misc 3.13: $(MAKE) cloc.stat.log" > $@
	@$(MAKE) -i cloc.stat >> $@ 2>&1
cloc.stat.log: $(_TEST.cloc.log)

ALL.test.cloc  := cloc.stat cloc.file cloc.lang cloc.csv cloc.total
ALL.testmisc   += $(ALL.test.cloc)
test.cloc:        $(ALL.test.cloc)
# TODO: test.cloc.log  must be special as it compares generated files
ALL.test.misc.log  += cloc.stat.log
#ALL.test.cloc.log   = $(ALL.test.cloc:%=%.log)
#test.cloc.log:    $(ALL.test.cloc.log)
# alias for convenience
test.cloc.all:    test.cloc

.PHONY: cloc

HELP-_modules       = _________________ targets for testing ancient Perl modules _
# TODO: build test targets
# already manually tested module versions:
#    perl 5.24, 5.28
#    openssl 0.9.8, 1.0.2-chacha, 1.0.2k, 1.1.0l, 1.1.1d
#
#    IO::Socket::SSL 2.044,  2.060
#    Net::DNS        0.66,   1.2, 1.19
#    Net::SSLeay     0.49.   1.82, 1.85
#    Time::Local     1.2300, 1.25

# SEE Make:Perl::Analyzer
HELP-_dev1          = __________________________________ targets for development _
HELP-analyse        = analyse code with Perl::Analyzer
HELP-analyse-output = analyse code and generate '$(_TEST.analyse.html)'
HELP-test.norc      = special target testing with/without -norc option
HELP-tags           = generate tags file for vi(m)
HELP-profile.sub.entry  = generate function calling tree of '$(SRC.pl)' (entry only)
HELP-profile.sub.exit   = generate function calling tree of '$(SRC.pl)' (entry and exit)
HELP-profile.sub.args   = generate function calling tree of '$(SRC.pl)' (in, out and parameter)
HELP-nytprof.out    = generate profiling data (for nytprofcalls)
HELP-nytprof.html   = generate profiling data in HTML format
HELP-dprof.out      = generate profiling data (for dprofpp; times, counts, calling tree)

_TEST.analyse.src  := ./
_TEST.analyse.dst  := ./$(O-DOC.dir)/perl-analyzer
_TEST.analyse.dat  := $(_TEST.analyse.dst)/o-saft.dat
_TEST.analyse.html := $(_TEST.analyse.dst)/index.html
TEST.opt.analyse    =
# TODO: --with-constants --with-fields
TEST.opt.analyse.dat= --datafile=$(_TEST.analyse.dat)
$(_TEST.analyse.dst):
	@mkdir $@

analyse:         TEST.opt.analyse.dir   = --source-dir=$(_TEST.analyse.src)
analyse-output:  TEST.opt.analyse.dir   = --output-dir=$(_TEST.analyse.dst)
analyse: $(_TEST.analyse.dst) $(SRC.pl) $(SRC.pm)
	@$(O-TRACE.target)
	@$(EXE.analyse)        $(TEST.opt.analyse.dat) $(TEST.opt.analyse.dir) $(TEST.opt.analyse)
$(_TEST.analyse.dat): analyse
analyse-output: $(_TEST.analyse.dat)
	@$(O-TRACE.target)
	@$(EXE.analyse-output) $(TEST.opt.analyse.dat) $(TEST.opt.analyse.dir) --format=html
analyse-out: analyse-output

ALL.test.analyse   := analyse analyse-output
ALL.testmisc       += $(ALL.test.analyse)
test.analyse:         $(ALL.test.analyse)

$(GEN.tags): $(SRC.pl) $(ALL.pm) $(SRC.cgi) $(SRC.tcl) $(ALL.Makefiles)
	ctags $^

ALL.gen        += $(GEN.tags)
#               # just because GEN.tags is defined in main Makefile

ALL.testmisc   += $(GEN.tags)

# check if result of +check and +info is identical with and without --no-rc
# commands LIST.norc.no-out.keys are ignored as they always differ
TEST.norc.host := localhost
_TEST.norc.dir  = $(TEST.logdir)/test.norc
LIST.norc.no-out.keys   := master_key \
                           session_id session_id_ctx \
                           session_startdate session_starttime session_ticket \
                           sts_expired \
                           http_body https_body pem text
LIST.norc.no-out.opt    := $(LIST.norc.no-out.keys:%=--no-out=%)
LIST.norc.opts          := --header --traceKEY
test.norc%:
	@$(O-TRACE.target)
	@$(eval _cmd = $(shell echo $* | sed -e 's/.log//'))
	@$(eval _log = $(_TEST.norc.dir)-$(_cmd))
	@$(eval _ext = log-$(TEST.today))
	@$(SRC.pl) $(TEST.norc.host) $(_cmd) $(LIST.norc.no-out.opt) $(LIST.norc.opts)         | sort > $(_log).$(_ext)
	@$(SRC.pl) $(TEST.norc.host) $(_cmd) $(LIST.norc.no-out.opt) $(LIST.norc.opts) --no-rc | sort > $(_log)--no-rc.$(_ext)
	@-diff $(_log).$(_ext) $(_log)--no-rc.$(_ext) || exit 0
	@rm    $(_log).$(_ext) $(_log)--no-rc.$(_ext)

ALL.test.norc   = test.norc+info test.norc+check
ALL.testmisc   += $(ALL.test.norc)
# TODO: test.norc%.log  NOT YET IMPLEMENTED

# TODO: Profiling should go to Makefile.profile or alike
# SEE Make:Profiling
# SEE Make:profile.sub
# SEE Make:profile.sub*_%
# SEE Make:profile.sub% target rule

_TEST.profile.log   = $(TEST.logdir)/profile.sub.log

TEST.profile.host  := localhost
profile.sub.entry:      PERL.OPTS   = PERLDB_OPTS='NonStop=1 frame=1'
profile.sub.entry_%:    PERL.OPTS   = PERLDB_OPTS='NonStop=1 frame=1'
profile.sub.exit:       PERL.OPTS   = PERLDB_OPTS='NonStop=1 frame=2'
profile.sub.exit_%:     PERL.OPTS   = PERLDB_OPTS='NonStop=1 frame=2'
profile.sub.args:       PERL.OPTS   = PERLDB_OPTS='NonStop=1 frame=15'
profile.sub.args_%:     PERL.OPTS   = PERLDB_OPTS='NonStop=1 frame=15'

# pattern rules can contain one % only, hence following sequence for _lineinfo is mandatory
profile.sub.%:          _lineinfo   = LineInfo=$(_TEST.profile.log)
profile.sub.%.log:      _lineinfo   = LineInfo=$(_TEST.profile.log)

profile.sub.entry.log:  PERL.OPTS   = PERLDB_OPTS='NonStop=1 frame=1  $(_lineinfo)'
profile.sub.exit.log:   PERL.OPTS   = PERLDB_OPTS='NonStop=1 frame=2  $(_lineinfo)'
profile.sub.args.log:   PERL.OPTS   = PERLDB_OPTS='NonStop=1 frame=15 $(_lineinfo)'
profile.sub.entry.log%: PERL.OPTS   = PERLDB_OPTS='NonStop=1 frame=1  $(_lineinfo)'
profile.sub.exit.log%:  PERL.OPTS   = PERLDB_OPTS='NonStop=1 frame=2  $(_lineinfo)'
profile.sub.args.log%:  PERL.OPTS   = PERLDB_OPTS='NonStop=1 frame=15 $(_lineinfo)'

profile.sub%:
	@$(O-TRACE.target)
	@$(eval _args   = $(shell echo "$*" | awk -F_ '{i=1;while(i<NF){i++;print $$i}}'))
	@$(eval my.args = $(shell [ -n "$(_args)" ] && echo $(_args) || echo $(TEST.args.misc) ))
	-env $(PERL.OPTS) perl -dS $(SRC.pl) $(TEST.profile.host) $(my.args) 2>&1 

# TODO: 
#     make profile.sub.entry | sed -e 's/ entering //'
#     make profile.sub.exit  | sed -e 's/ entering /+/' -e 's/exited / -/'
#     make profile.sub.args  | sed -e 's/ in  /+/' -e 's/out / -/' -e 's/ from .*\//\t/'
# better use dprof.out below

# requires perl module Devel/NYTProf or package, for example libdevel-nytprof-perl
_TEST.nytprof.dir   = $(TEST.logdir)/nytprof
_TEST.nytprof.log   = $(TEST.logdir)/nytprof.out
nytprof.out: $(_TEST.nytprof.log)
	@$(O-TRACE.target)
	@perl -d:NYTProf $(SRC.pl) $(TEST.profile.host) $(TEST.args.misc)
	@mv $@ $<
	@echo "# inspect with: nytprofcalls $(_TEST.nytprof.log)"
nytprof.html: $(_TEST.nytprof.log)
	@$(O-TRACE.target)
	@$(EXE.nytprof) $(TEST.opt.nytprof) -out $(_TEST.nytprof.dir) --file $<
	@echo "# inspect with: firefox $(_TEST.nytprof.dir)/index.html"
nytprof: nytprof.html

# requires perl module Devel/DProf or package, for example libdevel-dprof-perl
_TEST.dprof.log     = $(TEST.logdir)/dprof.out
$(_TEST.dprof.log):
	@$(O-TRACE.target)
	@env PERL_DPROF_OUT_FILE_NAME=$(_TEST.dprof.log) perl -d:DProf $(SRC.pl) $(TEST.profile.host) $(TEST.args.misc)
	@$(EXE.dprofpp) $(TEST.opt.dprofpp) $(_TEST.dprof.log)
	@echo ""
	@echo "# show calling tree: dprofpp -t $(_TEST.dprof.log)"
#dprof.out: PERL_DPROF_OUT_FILE_NAME=$(_TEST.dprof.log)
dprof.out: $(_TEST.dprof.log)
# useful options: -T -I
# dprofpp -t -f "(Carp::)|(Exporter::)|(Symbol::)|(DynaLoader::)"
.PHONY: $(_TEST.dprof.log)

# TODO: define summary macro for all profile targets
ALL.test.profile   := \
	profile.sub.entry \
	profile.sub.exit \
	profile.sub.args \
	nytprof.out \
	nytprof.html \
	dprof.out
ALL.testmisc   += $(ALL.test.profile)
test.profile:     $(ALL.test.profile)

ALL.qa          = $(ALL.pm) $(SRC.pl)

HELP-_qa1           = ____________________________ targets checking code quality _
HELP-test.quality   = search for various common coding mistakes, see make e-ALL.test.quality
HELP-test.pod   = check generated pod file

# SEE Make:podchecker
qa.pod:
	@echo "#make: $(HELP-test.pod) ..."
	@echo "#      most message of type '*** WARNING: empty section in previous ..' are ok"
	@-$(EXE.podchecker) $(GEN.pod)          || echo ""
	@echo ""

# following checks based on http://perldoc.perl.org/perldiag.html
# NOTE: all qa.* targets never fail, they are just informational
#       therefore if egrep fails, "echo OK" is used to avoid failure
qa.double_dref:
	@echo "#make: check depricated double dereferencing ..."
	@-egrep -H '\$$$$[^$$)]'    $(ALL.qa)   || echo "OK"
	@echo ""
qa.defined_arr:
	@echo "#make: check depricated defined(@array) ..."
	@-egrep -H 'defined[( ]*@' $(ALL.qa)    || echo "OK"
	@echo ""
qa.defined_hash:
	@echo "#make: check depricated defined(%hash) ..."
	@-egrep -H 'defined[( ]*%' $(ALL.qa)    || echo "OK"
	@echo ""
qa.defined_warnings:
	@echo "#make: check duplicate error and warning numbers ..."
	@$(MAKE_COMMAND) warnings.info | sort -k 2 \
	| awk '{nr=$$2;sub(/:/,"",nr);if(nr==last){print warn;print;}last=nr;warn=$$0}'
	@echo ""

qa.misspelled_regex:
	@echo "#make: check misspelled grouping in RegEx ..."
	@-egrep -H '\(:\?'         $(ALL.qa)    || echo "OK"
	@echo ""
qa.misspelled_critic:
	@echo "#make: check misspelled use of ## no critic ..."
	@-egrep -H ' # no critic'  $(ALL.qa)    || echo "OK"
	@echo ""

# some simple checks for Makefiles
qa.makefile_HELP:
	@echo "#make: check HELP- macro definitions in Makefiles ..."
	@-awk '/^HELP-/{print $$1"\t"FILENAME}' $(ALL.Makefiles)    | sort
	@echo ""
	@echo "#make: check duplicate HELP- macro definitions in Makefiles ..."
	@-awk '/^HELP-/{print $$1}' $(ALL.Makefiles)                | sort | uniq -d
	@echo ""
qa.makefile_help:
	@echo "#make: check help target definitions in Makefiles ..."
	@-awk '/^help/{print $$1"\t"FILENAME}' $(ALL.Makefiles)     | sort
	@echo ""
	@echo "#make: check duplicate help target definitions in Makefiles ..."
	@-awk '($$3=="="){next}/^help/{print $$1}' $(ALL.Makefiles) | sort | uniq -d
	@echo ""
#       # duplicate checks for targets need to avoid collecting the conditional
#       # targets which just define macros, hence $3=="=" 
ALL.test.quality   := \
		qa.pod \
		qa.double_dref \
		qa.defined_arr \
		qa.defined_hash \
		qa.defined_warnings \
		qa.misspelled_regex \
		qa.misspelled_critic \
		qa.makefile_HELP \
		qa.makefile_help
ALL.testmisc       += $(ALL.test.quality)
test.quality:         $(ALL.test.quality)

_TEST.quality.log   = $(TEST.logdir)/test.quality.log-$(TEST.today)
$(_TEST.quality.log):
	@echo "# Makefile.misc 3.13: $(MAKE) test.quality.log" > $@
	@$(MAKE) -i test.quality >> $@ 2>&1
test.quality.log: $(_TEST.quality.log)
	@$(O-TRACE.target)
	@$(O-TRACE.target.log)
	@diff $(TEST.logdir)/$@ $(_TEST.quality.log) \
	    && rm $(_TEST.quality.log) \
	    || mv $(_TEST.quality.log) $(TEST.logdir)/$@
	@-test -f $(TEST.logdir)/$@  ||  mv $(_TEST.quality.log) $(TEST.logdir)/$@
	@ls -l  $(TEST.logdir)/$@*
# TODO: same target as test.warnings.log

_EXE.prettyfilter  := sed -e 's/: */:\t/'
HELP-test.misc.todo = search for 'FIXME' and 'TODO' comments in '$(ALL.qa)'
HELP-test.misc.see  = search for 'SEE ' links in '$(ALL.src)'
HELP-test.misc.shebang  = get first line of file with '#!' (shebang) in $(ALL:src)'
HELP-test.misc.info = alias for: test.misc.see test.misc.shebang
testarg-misc_FIXME:
	@echo "#make: search for '# FIXME' in code ..."
	@-grep '# FIXME'            $(ALL.qa) | $(_EXE.prettyfilter)
	@echo ""
testarg-misc_TODO:
	@echo "#make: search for '# TODO' in code ..."
	@-grep '# TODO'             $(ALL.qa) | $(_EXE.prettyfilter)
	@echo ""
testarg-misc_head2:
	@echo "#make: search for '^=head2' in source files ..."
	@-grep '^=head2 '           $(ALL.src)
	@echo ""
testarg-misc_SEE:
	@echo "#make: search for '# SEE' in source files ..."
	@-grep '# SEE '             $(ALL.src) | $(_EXE.prettyfilter)
	@-egrep '^ *SEE '           $(ALL.src) | $(_EXE.prettyfilter)
	@echo ""
testarg-misc_shebang:
	@echo "#make: search for '#!' (shebang) in code ..."
	@-egrep -m 1 '^#![ /].*/'   $(ALL.src) | $(_EXE.prettyfilter)
	@echo ""
#   # get only  #!/...  and  #! /...  but not  #!#...
ALL.test.misc.todo     := testarg-misc_FIXME testarg-misc_TODO
ALL.test.misc.todo.log := $(ALL.test.misc.todo:%=%.log)
ALL.test.misc.info     := testarg-misc_head2 testarg-misc_SEE  testarg-misc_shebang
ALL.test.misc.info.log := $(ALL.test.misc.info:%=%.log)
ALL.testmisc           += $(ALL.test.misc.todo) $(ALL.test.misc.info)
test.misc.head2:          testarg-misc_head2
test.misc.see:            testarg-misc_SEE
test.misc.shebang:        testarg-misc_shebang
test.misc.todo:           $(ALL.test.misc.todo)
test.misc.todo.log:       $(ALL.test.misc.todo.log)
test.misc.info:           $(ALL.test.misc.info)
test.misc.info.log:       $(ALL.test.misc.info.log)
	@$(O-TRACE.target)
.PHONY: $(ALL.test.misc.log)

# define PHONY target to avoid misleading error messages when files are missing
#       2/2021: files are not yet on github
.PHONY: OSaft/_ciphers_iana.pm
.PHONY: OSaft/_ciphers_osaft.pm
.PHONY: OSaft/_ciphers_openssl_all.pm
.PHONY: OSaft/_ciphers_openssl_h.pm

ALL.test.misc      += test.bench test.bunt \
			test.wc \
			$(ALL.test.norc) \
			$(ALL.test.cloc) \
			$(ALL.test.quality) \
			$(ALL.test.misc.todo) \
			testarg-misc_shebang \
			$(GEN.tags)
ALL.test.misc.log  += test.quality.log $(ALL.test.misc.todo.log)
    # NOTE: ALL.test.misc does not contain $(ALL.testmisc) because they are too noisy

test.docs.all:      $(ALL.testdocs)
test.misc.all:      $(ALL.testmisc)
test.misc:          $(ALL.test.misc)
test.misc.log:      $(ALL.test.misc.log)
    # test.log-compare-hint does not make sense here
