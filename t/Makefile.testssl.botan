#!/usr/bin/make -rRf
#?
#? NAME
#?      Makefile.testssl.botan - additional settings for Makefile.testssl
#?
#? DESCRIPTION
#?      This Makefile contains addition settings for Makefile.testssl.
#?      For a detailled description, please see there.
#?
#? SYNOPSIS
#?      include Makefile.testssl.botan
#?
#? VERSION
#?      @(#) ÂÓW 1.2 24/06/08 13:50:55
#?
#? AUTHOR
#?      04-jun-24 Achim Hoffmann
#?
# -----------------------------------------------------------------------------

_SID.testssl.botan  := 1.2
#_MYSELF            := $(firstword $(MAKEFILE_LIST))

#_____________________________________________________________________________
#________________________________________________________________ variables __|

# for description of available variables please see: make vars

# SHA1 checksums for some tarballs (unique variable names here):
TESTSSL.src.sig.botan-3.4.0     = a3e039f019391b0363a38c07044bd92f9ca360cb
TESTSSL.src.tarball.botan       = botan-3.4.0.tar.xz

# TESTSSL.src.configure = --prefix=$(TESTSSL.home)   # default setting
TESTSSL.src.configure.botan     =

# define setting per vendor (type) of SSL-/TLS-server (use vendor's default)
# variables can be set absolute with = or added to default setting with +=
# should depend on a unique target, otherwise they become global defaults
botan-%:       TESTSSL.src.packages  = $(TESTSSL.default.apk) python3 g++
botan-%:       TESTSSL.src.configure += $(TESTSSL.src.configure.botan)
botan-%:       TESTSSL.src.suffix    = .tar.xz
botan-%:       TESTSSL.vm.version    = 1.2
botan-%:       TESTSSL.vm.type       = botan
botan-%:       TESTSSL.vm.port       = 3443
botan-%:       TESTSSL.vm.client     = botan tls_client
botan-%:       TESTSSL.vm.client.help= help
botan-%:       TESTSSL.vm.server.help= tls_server --help
botan-%:       TESTSSL.vm.server.dtls= $(TESTSSL.vm.server.tls) $(TESTSSL.vm.server.args)
botan-%:       TESTSSL.vm.server.tls = botan
botan-%:       TESTSSL.vm.server.args= tls_server $(TESTSSL.vm.home)/etc/cert.pem $(TESTSSL.vm.home)/etc/key.pem --port=$(TESTSSL.vm.port)
#botan-%:       TESTSSL.vm.run.args   = --network=host

TESTSSL.vm.build.compile.botan  = \
	test -x ./autogen.sh && ./autogen.sh || true && \\ $(_NL)\
	./configure.py $(TESTSSL.src.configure)      && \\ $(_NL)\
	make

TESTSSL.src.install.botan       = botan botan-test libbotan-*

# TODO generate cert by botan (see below) does not work, hence defaults are used
TESTSSL.vm.build.install.botan  = \
	mv $(TESTSSL.src.install.botan) $(TESTSSL.vm.home)/bin/ && \\ $(_NL)\
	cp $(TESTSSL.vm.tmp)/testssl-cert.pem $(TESTSSL.vm.home)/etc/cert.pem ; \\ $(_NL)\
	cp $(TESTSSL.vm.tmp)/testssl-key.pem  $(TESTSSL.vm.home)/etc/key.pem

TESTSSL.vm.build.install.erzeugt--falsche--zertifikate =\
	echo "mit diesen Zertifikaten akzeptiert botan keine Cipher" ; \\ $(_NL)\
	$(TESTSSL.vm.home)/bin/botan keygen > key.pem && \\ $(_NL)\
	$(TESTSSL.vm.home)/bin/botan gen_self_signed key.pem CN --country=DE --days=3650 > cert.pem

TESTSSL.vm.build.testing.botan  = \
	echo -n '\# number of ciphers $(TESTSSL.vm.client)):' ; \\ $(_NL)\
	$(TESTSSL.vm.server) tls_ciphers | wc -l ; \\ $(_NL)\
	$(TESTSSL.vm.server) tls_ciphers

# botan depends on libstdc++.so.6 libgcc_s.so.1 which must be preserved
# but was removed with g++, hence need to add again
TESTSSL.vm.build.cleanup.botan  = apk  add --no-cache libstdc++

#_____________________________________________________________________________
#________________________________________ private targets, not fully tested __|

# NOTE: only pattern rules are allowed, the first explizit target will become
# the first target in the parent too, usually not wanted ...

