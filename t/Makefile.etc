#! /usr/bin/make -rRf
#?
#? DESCRIPTION
#?      For more details please see
#?          ../Makefile  Makefile  Makefile.help  Makefile.pod
#?      make help.test.etc
#?
#? VERSION
#?      @(#) Makefile.etc 1.16 22/09/20 23:20:19
#?
#? AUTHOR
#?      19-mar-19 Achim Hoffmann
#?
# -----------------------------------------------------------------------------

HELP-help.test.etc  = targets for testing ciphers with various other tools

_SID.etc           := 1.16

_MYSELF.etc        := t/Makefile.etc
ALL.includes       += $(_MYSELF.etc)
ALL.inc.type       += etc
ALL.help.tests     += help.test.etc

ifeq (,$(_SID.test))
    -include t/Makefile
endif

TEST.etc.hosts      = localhost
ifdef TEST.hosts
    TEST.etc.hosts  = $(TEST.hosts)
endif

first-etc-target-is-default: help.test.etc

help.test.etc:        HELP_TYPE = etc
help.test.etc-v:      HELP_TYPE = etc
help.test.etc-vv:     HELP_TYPE = etc

HELP-_etc1          = ______________________________________________ testing ... _
HELP-test.etc       = various legacy tests
HELP-test.etc.log   = same as test.etc but store output in '$(TEST.logdir)/'
HELP-testcmd-etc-sslscan1.8     = test with sslscan version 1.8
HELP-testcmd-etc-sslscan1.11    = test with sslscan version 1.11.9
HELP-testcmd-etc-osaft_*        = test with o-saft.pl +cipher*
HELP-test.etc-cipher.all        = test all tools with cipher tests
HELP-test.etc-cipher.all.log    = same as HELP-test-cipher.all but store output in '$(TEST.logdir)/'

HELP.etc            = # no general documentation yet
HELP.test.etc.all   = # no special documentation yet

EXE.pl             := ../o-saft.pl
TEST.init          :=
TEST.args          :=
TEST.hosts          = $(TEST.etc.hosts)

# sslyze    may have problems due to python2 vs. python3
# sslmap.py may have problems due to python2 vs. python3
# manyssl   may have problems due to missing modules
# tls-scan  may have problems due to missing modules
# 

# testcmd-etc-sslscan* are defined as static targets, similar to testcmd-% , they
# can be used in the corresponding *.log target (pattern rule) automatically
# errors in these targets are ignored (because they may be missing too)

testcmd-etc-sslscan1.8:  EXE.pl    = /usr/bin/sslscan
testcmd-etc-sslscan1.8:  TEST.args = --no-failed
testcmd-etc-sslscan1.8:
	-cd $(TEST.dir) && $(EXE.pl) $(TEST.args) $(TEST.hosts)

#testcmd-etc-sslscan1.11: GNU make does not honor empty pattern
testcmd-etc-sslscan1.1%: EXE.pl    = /opt/bin/sslscan-1.11.9
testcmd-etc-sslscan1.1%: TEST.args = --no-colour --no-failed --no-check-certificate --no-heartbleed
testcmd-etc-sslscan1.11:
	-cd $(TEST.dir) && $(EXE.pl) $(TEST.args) $(TEST.hosts)

testcmd-etc-testssl.s%:  EXE.pl    = testssl.sh
testcmd-etc-testssl.s%:  TEST.args  = -e --color 0
#testcmd-etc-testssl.sh%: TEST.args += --openssl /usr/local/openssl/bin/openssl
testcmd-etc-testssl.sh: 
	-cd $(TEST.dir) && $(EXE.pl) $(TEST.args) $(TEST.hosts)

# get supported ciphers from each tool
testcmd-etc-ssltest.pl%:        EXE.pl      = ssltest.pl
testcmd-etc-ssltest.pl-count:   TEST.args  += --list
testcmd-etc-ssltest.pl-count:
	@$(EXE.echo) -n "# $(EXE.pl)\t "
	@-cd $(TEST.dir) \
	&& $(EXE.pl) $(TEST.args) $(TEST.hosts) \
	|  awk '/iphers/{next}{c[$$2]++}END{print length(c)" ciphers"}'

testcmd-etc-sslscan1.11-count:  TEST.args  += --show-ciphers
testcmd-etc-sslscan1.11-count:
	@$(EXE.echo) -n "# sslscan1.11\t "
	@-cd $(TEST.dir) \
	&& $(EXE.pl) $(TEST.args) $(TEST.hosts) \
	|  awk '(0==NF){if(1==count){print length(c)" ciphers";exit;}}(1==count){c[$$1]++;}/Supported Client Cipher/{count=1}'

testcmd-etc-testssl.sh-count: 
	@$(EXE.echo) -n "# $(EXE.pl)\t "
	@-cd $(TEST.dir) \
	&& $(EXE.pl) $(TEST.args) $(TEST.hosts) | awk '/esting all/{print $$3" ciphers"}'

testcmd-etc-osaft.pl%:          EXE.pl      = o-saft.pl
testcmd-etc-osaft.pl-count:     TEST.args  += ciphers
testcmd-etc-osaft.pl-count:
	@$(EXE.echo) -n "# $(EXE.pl)\t "
	@-cd $(TEST.dir) \
	&& $(EXE.pl) $(TEST.args) $(TEST.hosts) \
	|  awk '("ciphers"==$$3){sub(/= /,"");print}'

ALL.testetc-count   = \
	testcmd-etc-sslscan1.11-count \
	testcmd-etc-ssltest.pl-count \
	testcmd-etc-testssl.sh-count \
	testcmd-etc-osaft.pl-count

# testcmd-etc-count is a slow target, as most tools test for the ciphers
# to print the used/available ciphers
_testcmd-etc-count-head:
	@$(EXE.echo) "# number of known ciphers supported by various tools"
testcmd-etc-count: _testcmd-etc-count-head $(ALL.testetc-count)
	@$(TRACE.target)

# use testcmd-% pattern rule for all o-saft.pl +cipher tests
testcmd-etc-osaft_%:     TEST.args = --enabled --header --no-hint $(TEST.hosts)
testcmd-etc-osaft_--legacy-owasp: TEST.args = +cipher --enabled --header --legacy=owasp $(TEST.hosts)
    # tricky illegal option to enforce another (second) command with +cipher

LIST.etc-osaft-CMDS    := +cipher +cipherraw

ALL.test.etc-cipher = \
	testcmd-etc-sslscan1.8 \
	testcmd-etc-sslscan1.11 \
	testcmd-etc-testssl.sh \
	testcmd-etc-osaft_--legacy-owasp \
	$(LIST.etc-osaft-CMDS:%=testcmd-etc-osaft_%) 
ALL.test.etc-cipher.log = $(ALL.test.etc-cipher:%=%.log)

# TODO: targets for following:
# common test wih openssl:
#    echo | openssl s_client -tlsextdebug -msg -connect ${fqdn}:443 2>&1 | grep " Start"
# DESCRIPTION
#      Debugging with special ciphers.
#      All programs need to return same list of ciphers.
#      Result with or without SNI may be different.
#
LIST.ciphers   := DES-CBC3-SHA AES256-SHA ECDHE-RSA-AES256-SHA ECDHE-RSA-AES128-GCM-SHA256
#_LIST.ciphers   = $(shell $(LIST.ciphers) :)
#_LIST.c-regex   = $(shell $(LIST.ciphers) |)
#  without SSI:
#    sslscan --tlsall --sni-name="x"  $host  |egrep "($(_LIST.c-regex))"
#    o-saft.pl --tracecmd         --cipher=$(_LIST.ciphers) +cipher    $host --nosni
#    o-saft.pl --tracecmd         --cipher=$(_LIST.ciphers) +cipher    $host --nosni --force-openssl
#    o-saft.pl --tracecmd --trace --cipher=$(_LIST.ciphers) +cipher    $host --nosni
#    o-saft.pl --tracecmd --trace --cipher=$(_LIST.ciphers) +cipher    $host --nosni --force-openssl
# ALL.test-openssl = $(LIST.ciphers:%=%testcmd-openssl_%))
#
#  with SSI:
#    sslscan --tlsall                 $host  |egrep "($(_LIST.c-regex))"
#    o-saft.pl --tracecmd         --cipher=$(_LIST.ciphers) +cipher    $host
#    o-saft.pl --tracecmd --trace --cipher=$(_LIST.ciphers) +cipher    $host

ALL.test.etc       += $(ALL.test.etc-cipher) $(ALL.testetc-count) testcmd-etc-count
ALL.test.etc.log   += $(ALL.test.etc-cipher.log)

test.etc.log-compare:   TEST.target_prefix  = testcmd-etc
test.etc.log-move:      TEST.target_prefix  = testcmd-etc
test.etc.log:           TEST.target_prefix  = testcmd-etc

test.etc:           $(ALL.test.etc)
test.etc.log:       $(ALL.test.etc.log) test.log-compare-hint
