#! /usr/bin/make -rRf
#?
#? NAME
#?      Makefile    - makefile for help targets of O-Saft project
#?
#? SYNOPSYS
#?      make [options] [target] [...]
#?
#? DESCRIPTION
#?      For detailed descriptions please see  t/Makefile.pod .
#?
#? EXAMPLES
#?          make help.doc
#?          make macro macro=MAKEFILE
#?          make m-MAKEFILE
#?          make echo  echo=MAKEFILE
#?          make e-MAKEFILE
#?          make p-MAKEFILE
#?          make t-help.doc
#?          make targets
#?          make targets.me
#?
#? VERSION
#?      @(#) Makefile.help 1.87 22/02/21 13:00:54
#?
#? AUTHOR
#?      18-apr-18 Achim Hoffmann
#?
# -----------------------------------------------------------------------------

HELP-help.test.help = targets to get information/documentation from Makefiles

_SID.help          := 1.87

_MYSELF.help       := t/Makefile.help
ALL.includes       += $(_MYSELF.help)
ALL.inc.type       += help
ALL.help.tests     += help.test.help

MAKEFLAGS          += --no-builtin-variables --no-builtin-rules
.SUFFIXES:

first-help-target-is-default: help.help

help.test.help:       HELP_TYPE = help
help.test.help-v:     HELP_TYPE = help

#_____________________________________________________________________________
#________________________________________________________________ variables __|

# internal variables
_TAB           := \\011
_NL            := \\012
_CR            := \\015
T              := $$""(_NL)
# define _SP containing a single space (tricky as _TEST.empty is empty)
_TEST.empty    :=
_SP            := $(_TEST.empty) $(_TEST.empty)

# internal help
#     HELP_TYPE     - type of the Makefile*, must be the filename's extension
#                     (the definition here is a default dummy to avoid errors
#                      using this Makefile.help, resulting in wrong output)
#     HELP_INFO     - formatted header line to show general informations
#     HELP_NAME     - formatted header line to show macro/variable definition
#     HELP_RULE     - formatted header line to show target definition
#     HELP_LINE     - just a separation line (used in tabular output)
#     HELP_HEAD     - actual header line, defined per target; it's usualy set
#                     to HELP_INFO, HELP_NAME or HELP_RULE, can be individual
#     HELP_HEADER   - complete text for header in tabular output, looks like:
#                           #---------------+----------
#                           # key           | value
#                           #---------------+----------
#                     it's mainly used in internal targets like _help.HEAD
HELP_TYPE       = help
HELP_INFO      := \# Name          | Description/Content
HELP_NAME      := \# Macro/Variable| Value
HELP_RULE      := \# Target        | Description
HELP_LINE      := \#---------------+--------------------------------------------------------------
HELP_HEAD       = $(HELP_NAME)
HELP_HEADER     = $(HELP_LINE)\012$(HELP_HEAD)\012$(HELP_LINE)
HELP_USAGE      = **USAGE:  $(MAKE_COMMAND) $($@) '$($@)=your-query'
HELP_F_TARGET   = _file
doc.all-v:HELP_F_TARGET = _file-v

# HELP_HEAD and HELP_RULE  will be set conditionally per target/rule also

# setting if Makefile.inc not included
help.inc: HELP_TYPE = inc
help.inc: HELP_HEAD = $(HELP_RULE)

# Define scripts as variables, for better human readability. For details about
# the commands for matching macro and target names, please see in Makefile.pod
# "O-Saft Makefile Syntax"  and  "Make:target matching".
# Script variables defined in t/Makefile:
#     _AWK_macro_by_line    - extract macro  names
#     _AWK_target_by_line   - extract target names
#     _AWK_target_to_arr    - extract target names and store uniquely in arr[]
#     _AWK_print_arr_END    - print collected data from arr[]
#     _AWK_print_file       - either print seperator line or the filename
# Script variables defined below:
#     _AWK_HELP_by_line     - extract HELP- macro names for documentation, the
#                             HELP-_* print as is
#                             HELP-*  extract target name and print with text
#     _AWK_gen_eval_target  - print f-* and _f-* target name from HELP-* macro
#     _AWK_gen_print_file   - print
#                             NOTE: FILENAME there is an awk variable
_AWK_HELP_by_line   := /^HELP-_/{sub(/ /,"",$$2); print "\n\t\t\#"$$2; next} \
                       /^HELP-/{ key=$$1; txt=substr($$0,index($$0,"=")+2);\
                                 sub(/HELP-/,"",key); gsub(/ /,"",key);    \
                                 tab="\t"; if(length(key)<8){tab="\t\t";}  \
                                 printf("%s%s\# %s\n",key,tab,txt);         \
                              }
_AWK_gen_eval_target:= /^HELP-_/{print "_f-"$$1}/^HELP-[^ _]/{sub(/HELP-/,"");print "f-"$$1}
_AWK_gen_print_file := (FNR==1){ print "$(HELP_F_TARGET)"FILENAME}
%-v: _AWK_print_file:= (FNR==1){ print "\n\t\t\# ---------- "FILENAME" ..." }

# Tools used to gather information from Makefile*,  take care! real  TABS  are
# inside the sed commands.
# I.g. awk should be prefered where possible and feasible, as sed matches last
# occurrence of a pattern.

# Above script variables and following tool variables rely on  the conventions
# (variable names, etc.) as defined in Makefile.pod  "O-Saft Makefile Syntax".
EXE.eval        = awk -F=   '$(_AWK_gen_print_file)$(_AWK_gen_eval_target)'
EXE.list        = awk       '$(_AWK_print_file)$(_AWK_macro_by_line)'
EXE.help        = awk -F=   '$(_AWK_print_file)$(_AWK_HELP_by_line)'
EXE.macro       = sed -n -e '/^$($@)[ 	:+]*=/{' \
			 -e ':m' -e 'p' -e '/\\$$/{' -e 'n' -e 'bm' -e '}' -e '}'
EXE.pmacro      = sed -n -e '/.*$($@).*[        :+]*=/{' \
			 -e ':m' -e 'p' -e '/\\$$/{' -e 'n' -e 'bm' -e '}' -e '}'
EXE.target      = sed -n -e ':t' -e '/^[^:\#]*$($@)[^:\#]*[:]/{' \
			 -e ':c' -e 'p' -e 'n' -e '/^       /bc' -e 'bt' -e '}'
EXE.targets     = awk       '$(_AWK_print_file)$(_AWK_target_by_line)'
EXE.wordperline = tr -s " $(_TAB)" "$(_NL)$(_NL)"
#               # must use " so that make's variables are evaluated correctly
EXE.wordperline:= awk '{for(i=1;i<=NF;i++){printf("\t\t  %s\n",$$i)}}'

# NOTE: all EXE.* macros above cannot be shown using echo, eval or show target
#       they all may return errors like: /bin/sh: 1: Syntax error:...

ifndef EXE.dummy
    EXE.dummy   = /bin/echo -n ""
endif

ifndef _MYSELF.inc
    # dummy setting until Makefile.inc is included, keeps errors away
    _MYSELF.inc = t/Makefile.inc
endif

ifndef _CMD.sort.opt
    # setting until Makefile.inc is included
    _CMD.sort.opt   := -n -f
endif

#_____________________________________________________________________________
#_________________________________________________________ internal targets __|

_HELP-_help0    = _________________________________ targets for internal use _
_HELP-help.HEAD = print table header for documentation texts
_HELP-help.BODY = print table body   for documentation texts (all HELP-* lines)
_HELP-help.FOOT = print table footer for documentation texts
_HELP-help.HELP = print individual documentation texts (HELP.TYP variale)
#HELP-help.LIST = print targets for getting list of targets (testing targets only)
_HELP-help.LIST = $(_NL)\
\# To get a list of targets, use:$(_NL)\
\#    make help.test.$(HELP_TYPE).all$(_NL)\
\#    make e-ALL.test.$(HELP_TYPE)$(_NL)\
\#    make s-ALL.test.$(HELP_TYPE)

_HELP-help.make = $(_NL)\
\# To see which commands in a TARGET are executed, simply call 'make -n TARGET'$(_NL)\
\# Note that the *.log targets then report a bunch of shell commands.$(_NL)\

_help.HEAD:
	@echo "$(HELP_HEADER)"

_help.FOOT:
	@echo "$(HELP_LINE)"

_help.BODY:
	@$(TRACE.target)
	@$(EXE.help) $(_MYSELF.$(HELP_TYPE))

_help.LIST:
	@$(TRACE.target)
	@echo "$(_HELP-help.LIST)"

# same as _help.FOOT but unique name, so it can be used together with _help.FOOT
_help.LINE:
	@echo "$(HELP_LINE)"

# neet to set own variable name because $($(HELP.$(HELP_TYPE))) does not work
_help.HELP:  _HELP_HELP = HELP.$(HELP_TYPE)
_help.HELP:
	@$(TRACE.target)
	@echo "$($(_HELP_HELP))"
	@echo "$(_HELP-help.make)"

.PHONY: _help.HEAD _help.BODY _help.FOOT _help.LIST _help.HELP

#_____________________________________________________________________________
#_____________________________________________________________ help targets __|

# line printed with help should work copy&paste, hence some dummy definitions
MYmacro         = dummy macro/variable used in examples
MYtarget: MYVAR = dummy target macro used in examples
MYtarget: dummy_dependency
	@$(EXE.dummy)

HELP-_help1     = __________________________ targets for help about Makefile _
HELP-macros     = list all macro names used in Makefile* (alias: list, vars)
HELP-targets    = list all targets used in Makefile* (alias: rules)
HELP-macros.me  = list all macro names used in calling Makefile
HELP-targets.me = list all targets used in calling Makefile
HELP-e-MYmacro  = show content of MYmacro expanded (all in one line)
HELP-s-MYmacro  = show content of MYmacro expanded (one word per line)
HELP-m-MYmacro  = show definition of MYmacro as is      - exact macro match
HELP-p-MYmacro  = show all definitions of MYmacro as is - macro pattern match
HELP-t-MYtarget = show MYtarget                         - exact target match

HELP-_help2     = ________________________________ targets for documentation _
HELP-help.help  = print this documentation
HELP-help.doc   = same as help.help
HELP-help.all   = print all targets, including test and development targets
#               # HELP-help.all - same as in ../Makefile (cannot be reused)
HELP-help.test  = print documentation about test targets
HELP-help.critic= print documentation about perlcritic targets
#               # HELP-help.critic - also in Makefile.critic (a bit different)
HELP-help.makefiles.doc = print documentation about available Makefile.*
#               # HELP-help.makefiles.doc - also in Makefile.makefiles

HELP.help       = $(_NL)\
\# To see in which Makefile* the listed targets are defined, use following:$(_NL)\
\#    $(MAKE_COMMAND) help.all-v        $(_NL)\
\# The targets to show information/content from the Makefile are:$(_NL)\
\#    echo eval macro pmacro show target$(_NL)\
\# which are used like:                 $(_NL)\
\#    $(MAKE_COMMAND) echo  echo=MYVAR  $(_NL)\
\#    $(MAKE_COMMAND) macro macro=MYVAR $(_NL)\
\# For easy use, following alias exist: $(_NL)\
\#    e-  m-  p-  s-  t-                $(_NL)\
\# which are used like:                 $(_NL)\
\#    $(MAKE_COMMAND) e-MYmacro         $(_NL)\
\#    $(MAKE_COMMAND) m-MYmacro         $(_NL)\
\#    $(MAKE_COMMAND) p-MYmacro         $(_NL)\
\#    $(MAKE_COMMAND) s-MYmacro         $(_NL)\
\#    $(MAKE_COMMAND) t-MYtarget        $(_NL)\

ALL.help       += help.help help.critic help.doc
ALL.help       += $(ALL.help.tests)
                # add all other help.test* targets

# our own targets using help% or alike
help.help:        HELP_TYPE = help
help.help%:       HELP_TYPE = help
help.help:        HELP_HEAD = $(HELP_RULE)
help.help%:       HELP_HEAD = $(HELP_RULE)
help.doc%:        HELP_HEAD = $(HELP_RULE)
help.doc.all:     HELP_HEAD = $(HELP_RULE)
target:           HELP_HEAD = $(HELP_RULE)

help.%: _help.HEAD _help.BODY _help.FOOT _help.LIST _help.HELP
	@$(TRACE.target)

# The main difference between the targets  help  and  doc  is, that help  uses
# external tools to extract the information from Makefile*,  while target  doc
# uses make's functionality to display the same information and also evaluates
# variables used in the targets. Both targets use the same text.

# legacy aliases
help.doc: help.help

.PHONY: help.doc


# Following  file%  targets are used for doc.all target only, they are just a
# dirty hack so that output of target help.all and doc.all are similar.
# NOTE: quick&dirty as  $(TEST.dir)  is hardcoded as t/ in the target names.
_HELP_LINE := \#-------------------------------------------------------------
_filet/%: _file-egal
	@echo ""
	@echo "\t\t$(_HELP_LINE)"
_file%:
	@echo ""
	@echo "\t\t$(_HELP_LINE)"
_file-vt/%:
	@echo ""
	@echo "\t\t# ---------- t/$* ..."
_file-v%:
	@echo ""
	@echo "\t\t# ---------- $* ..."

#dbx _isempty:  @echo "# target: $($@) - $($($@))."
# NOTE: following target is adapted to be use in echo, show, macro and target
#       targets, hence the target name must be recursively evaluated, that's
#       why we use  $($($@)) instead of $($@)
_notempty:
	@if [ '$($($@))' = '' ]; then \
	    $(ECHO) "$(HELP-$($@))"; \
	    $(ECHO) "$(HELP_USAGE)"; \
	    exit 1; \
	fi;
	@$(ECHO) "$(HELP_HEADER)"

_line:
	@echo ""
	@$(ECHO) "$(_TAB)$(_TAB)#$($($@))"

.PHONY: _notempty _line

help-makefiletitle-%:
	@$(TRACE.target)
	@$(ECHO) "Makefile.$*$(_TAB)# $(HELP-help.test.$*)"

macros:
	@$(TRACE.target)
	@$(EXE.list) $(MAKEFILE_LIST)    | sort $(_CMD.sort.opt)
macros%me:
	@$(TRACE.target)
	@$(EXE.list) $(MAKEFILE)         | sort $(_CMD.sort.opt)
vars: macros
list: macros
lists%me: macros.me

targets:
	@$(TRACE.target)
	@$(EXE.targets) $(MAKEFILE_LIST) | sort -u -f
targets%me:
	@$(TRACE.target)
	@$(EXE.targets) $(MAKEFILE)      | sort -u -f
rules: targets
rules%me: targets.me

# eval target quick&dirty:
#       @$(ECHO) "$($@)$(_TAB)$(_TAB)# $(HELP-$($@))"
# pretty printed format using awk see below
eval:
	@$(TRACE.target)
	@$(ECHO) "$($@) $(HELP-$($@))" | awk '{t="\t# ";if(length($$1)<8){t="\t\t# ";}sub(/ /,t);print}'

# Following targets are used to show information about variables and targets:
#       echo, eval, macro, pmacro, show, target
# The targets get the name of the macro, variable or target in a variable with
# the same name as the target itself. Example:
#       make macro macro=MAKEFILE
# To simplify command lines, a pattern rule exists for each of these targets.
# Example:
#       make m-MAKEFILE
# These targets search in all makefiles, using  $(MAKEFILE_LIST),  and not our
# own  $(ALL.Makefiles). This way the targets work in all other makefiles too,
# somehow, (if they include this one).

# FIXME: echo fails if the content of the variable contains braces or semicolon
echo:
	@$(TRACE.target)
	@$(ECHO) '$($($@))'

show: _notempty=show
show: _notempty
	@$(TRACE.target)
	@$(ECHO) '$($@) = '
	@$(ECHO) '$($($@))' | $(EXE.wordperline)

macro: _notempty=macro
macro: _notempty
	@$(TRACE.target)
	@$(EXE.macro) $(MAKEFILE_LIST)
makro: macro

pmacro: _notempty=pmacro
pmacro: _notempty
	@$(TRACE.target)
	@$(EXE.pmacro) $(MAKEFILE_LIST)

target: _notempty=target
target: _notempty
	@$(TRACE.target)
	@$(EXE.target) $(MAKEFILE_LIST)

# following rules are shortcuts for the above targets
e-%:
	@$(MAKE) -s echo=$* echo
f-%:
	@$(MAKE) -s eval=$* eval
_f-%:
	@$(MAKE) -s _line=$* _line
s-%:
	@$(MAKE) -s show=$* show
m-%:
	@$(MAKE) -s macro=$* macro
p-%:
	@$(MAKE) -s pmacro=$* pmacro
t-%:
	@$(MAKE) -s target=$* target

.PHONY: macros targets rules list vars eval echo show macro pmacro target

#_____________________________________________________________________________
#_____________________________________________________________________ test __|

# NOT YET IMPLEMENTED/USED
# HELP-_help4     = _____________________________________ testing help targets _
# HELP-test.help      = test help* targets of our Makefiles
# HELP-test.help.log  = same as test.help but store output in '$(TEST.logdir)/'
# HELP-test.help.log-compare  = compare results of test.help.log (if any)

ALL.testhelp        = $(shell awk -F: '/^testcmd-help%/{next} /^testcmd-help/{arr[$$1]=1}$(_AWK_print_arr_END)' $(_MYSELF.help))
ALL.test.help       = $(ALL.testhelp)
ALL.test.help.log   = $(ALL.test.help:%=%.log)

test.help.log-compare:  TEST.target_prefix  = testcmd-help
test.help.log-move:     TEST.target_prefix  = testcmd-help
test.help.log:          TEST.target_prefix  = testcmd-help

# TODO: explain test.help uses "make help", while test.hlp uses "o-saft.pl --help"
test.help:          $(ALL.test.help)
test.help.log:      $(ALL.test.help.log) test.log-compare-hint
