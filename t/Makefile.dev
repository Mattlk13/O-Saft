#!/usr/bin/make -rRf
#?
#? DESCRIPTION
#?      For more details please see
#?          ../Makefile  Makefile  Makefile.help  Makefile.pod
#?      make help.test.dev
#?
#? VERSION
#?      @(#) Makefile.dev 3.16 24/09/04 00:22:47
#?
#? AUTHOR
#?      19-apr-19 Achim Hoffmann
#?
# -----------------------------------------------------------------------------

HELP-help.test.dev  = targets for testing internal documentation and functionality

O-SID.dev          := 3.16
O-SELF.dev         := t/Makefile.dev
ALL.includes       += $(O-SELF.dev)
ALL.inc.type       += dev
ALL.help.tests     += help.test.dev

first-dev-target-is-default: help.test.dev

ifeq (,$(O-SID.test))
    -include t/Makefile
endif

help.test.dev:        HELP_TYPE = dev
help.test.dev-v:      HELP_TYPE = dev
help.test.dev-vv:     HELP_TYPE = dev

#_____________________________________________________________________________
#________________________________________________________________ variables __|

TEST.dev.hosts      =

# TODO: other tools should go to Makefile.usr
#       these targets require the symbolic link: usr -> ../usr

# list of source files (executables) to be used for some "grep"-targets
# NOTE: contains only source files with potentionally marked control flow. This
# is for sure in  SRC.pl  and  SRC.tcl.  To avoid  the target re-
# turning "failed", it must be ensured that the last file returns something, so
# SRC.pl  is the last in the list (see t*_flow target below)
LIST.sources       := $(SRC.tcl:%=../%)  $(SRC.pm:%=../%)  $(SRC.pl:%=../%)

# list of programs 
LIST.programs      := \
	$(SRC.sh) $(EXE.o_docker) $(GEN.src) \
	$(SRC.pl) $(SRC.tcl)      $(SRC.pm)  \
	$(TEST.dir)/Makefile.pod \
	INSTALL.sh \
	$(O-DIR.usr)/bunt.pl \
	$(O-DIR.usr)/install_openssl.sh  \
	$(O-DIR.usr)/gen_standalone.sh
#EXE.o-saft-docker-dev  := ../$(EXE.o_docker)-dev

# no targets are generated for empty LIST.* variables

LIST.o-saft.tcl    := --help=opts --test-o-saft
LIST.o-saft.pl     :=  
LIST.o-saft        :=  -help -list -help=rc -help=sni
LIST.o-saft-docker :=  -help
# TODO: LIST.o-saft-docker-dev  := -help
LIST.o-saft-mode   :=  -cli  -cgi  -gui  -log
LIST.o-saft-post   := \
	-post=HTML-simple.awk -post=HTML-table.awk  -post=lazy_checks.awk \
	-post=JSON-array.awk  -post=JSON-struct.awk \
	-post=XML-value.awk   -post=XML-attribute.awk 

LIST.t-makefile    :=
_TEST.dev.tmpfile  := /tmp/tmpfile

LIST.usr-bunt.pl   := --test
LIST.usr-gen_standalone.sh  := --n --s --t

# command and checks NOT YET IMPLEMENTED are hardcoded here,
# should be the same commands_notyet in osaft.pm
LIST.o-saft.notyet := \
	+closure    +cipher_order   +cipher_weak    +cps_valid  +fallback \
	+open_pgp   +lzo    +sgc    +scsv   +time   +zlib   \

HELP-_dev1          = __________________________ testing internal documentations _
HELP-test.dev       = test various internal documentation and functionality
HELP-test.dev.log   = same as test.dev but store output in '$(TEST.logdir)/'
HELP-test.dev.EXE_pod    = print POD of EXE using:    '$(EXE.gendoc.perldoc)'
HELP-test.dev.EXE_--help = print documentation, using: EXE --help
HELP-test.dev.help.all   = print all test.dev.EXE_--help
HELP-test.dev.pod.all    = print all test.dev.EXE_pod
HELP-test.dev.help.log   = same as test.dev.help.all but store output in '$(TEST.logdir)/'
HELP-test.dev.pod.log    = same as test.dev.help.all but store output in '$(TEST.logdir)/'

_HELP-_dev2         = _______________ summary targets for internal functionality _
HELP.dev = $(O-NL)$(O-TAB)$(O-TAB)\#$(_HELP-_dev2)$(O-NL)

HELP.dev       += test.dev.help.all\t\# targets for testing --help option\n
HELP.dev       += test.dev.pod.all\t\# targets for testing perldoc generation\n

#_____________________________________________________________________________
#______________________________________________________ targets for testing __|

# Automatically generated targets for each program are:
#       testarg-dev-<program>--help
#       testarg-dev-<program>_pod
# Note that not all programs in  LIST.program  support  --help  or have POD,
# this then results in different or empty output, for example o-saft-docker.
# Some of them are explicitly disabled, see "useless generated" below.
#

# usually: _EXE.perldoc-opt
_EXE.gendoc-opt    := $(_EXE.$(EXE.gendoc)-opt)
_EXE.log-filterarg := sed \
		-e '/^perl /s/ v[0-9].[0-9._-]* / OSAFT_VERSION /' \
		-e '/^perl /s/ 20..-[0-9][0-9]-[0-9][0-9] / OSAFT_DATE /'
    # quick&dirty filter, may match and change also valid data in rare cases
    #   example line: perl v5.36.0   2023-11-11  ....
    #   changed to:   perl OSAFT_VERSION   OSAFT_DATE  ....
    # SEE Make:EXE.log-filter
    # SEE GNU Make:Dragons
ifndef dev-macros-generated
    # SEE Make:macros
    # need to call program in this directory and not the one found via $PATH

    # SEE Make:generating help
    $(foreach _prg, $(LIST.programs), \
       $(eval HELP.dev += test.dev.$(subst /,-,$(_prg)).all\t\# targets for testing '$(_prg)'\n)\
    )
    $(eval HELP.dev +=\t\t\#____________ same as above, but store output in '$(TEST.logdir)' _\n)
    $(foreach _prg, $(LIST.programs),\
        $(eval _test=test.$(subst /,-,$(_prg))) \
        $(eval HELP.dev += test.$(_test)_ARG.log\t\# see test.$(_test)_ARG but ...\n)\
    )
    undefine _prg
    undefine _test

    # generate testarg-*_pod and testarg-*_--help targets
    $(foreach _prg, $(LIST.programs),\
        $(eval _name=$(subst /,-,$(_prg)))    \
        $(eval _testarg=testarg-dev-$(_name)) \
        $(eval $(_testarg)_pod.log: EXE.log-filterarg = $(_EXE.log-filterarg)) \
        $(eval $(_testarg)_pod:     EXE.pl    = $(EXE.gendoc) $(_EXE.gendoc-opt)) \
        $(eval $(_testarg)_pod:     TEST.init = ../$(_prg)) \
        $(eval $(_testarg)_--help:  TEST.init = --help)     \
        $(eval ALL.test.dev.$(_name) += $(_testarg)_pod $(_testarg)_--help) \
        $(eval ALL.test.dev.pod      += $(_testarg)_pod)    \
        $(eval ALL.test.dev.help     += $(_testarg)_--help) \
    )
    undefine _prg
    undefine _name
    undefine _testarg

    # generate testarg-* targets
    $(foreach _prg, $(LIST.programs),\
        $(call GEN.targets-init,testarg,dev,$(_prg),LIST.$(subst /,-,$(_prg))) \
    )

    $(eval _prg=o-saft)
    $(foreach _arg, $(LIST.o-saft-mode),\
        $(eval _testarg=testarg-dev-$(_prg)_$(subst =,-,$(_arg))) \
        $(eval ALL.test.dev.$(_prg)-mode += $(_testarg)) \
        $(eval $(_testarg):     TEST.init = $(_arg))     \
        $(eval $(_testarg):     TEST.args = +quit $(TEST.host)) \
    )
    $(eval     test.dev.$(_prg)-mode.all :  $(ALL.test.dev.$(_prg)-mode))
    undefine _arg
    undefine _testarg
    $(foreach _arg, $(LIST.o-saft-post),\
        $(eval _testarg=testarg-dev-$(_prg)_$(subst =,-,$(_arg))) \
        $(eval ALL.test.dev.$(_prg)-post += $(_testarg)) \
        $(eval $(_testarg):     TEST.init = $(_arg))     \
    )
    $(eval     test.dev.$(_prg)-post.all :  $(ALL.test.dev.$(_prg)-post))
    undefine _arg
    undefine _prg
    undefine _testarg
    $(eval undefine _prg)

endif

testarg-dev-o-saft_-post%:      EXE.pl    = ../$(SRC.sh)
testarg-dev-o-saft_-post%:      TEST.args = --no-rc --header $(TEST.host)
#testarg-dev-o-saft_-post%:      TEST.args = $(TEST.host)

$(_TEST.dev.tmpfile):
	@mkdir $@

# o-saft -log calls o-saft.tcl but +quit ensures that the GUI is not shown, the
# option --d is added which is passed from o-saft to o-saft.tcl and then forces
# to print some verbose information
testarg-dev-o-saft_-log:            TEST.args += --d

# more individual targets for SRC.sh (calling usr/bunt.pl)
# TODO: use pattern rule to define TEST.dev.hosts instead hardcoded localhost
#       testarg-dev-o-saft_--colour%:    TEST.dev.hosts  = localhost
testarg-dev-o-saft_--colour:        TEST.args = --colour +unknown-cmd $(TEST.host)
testarg-dev-o-saft_--colour+ocsp:   TEST.args = --colour        +ocsp $(TEST.host)
testarg-dev-o-saft_--colour-line:   TEST.args = --colour --line +ocsp $(TEST.host)
ALL.test.dev            += \
	testarg-dev-o-saft_--colour \
	testarg-dev-o-saft_--colour+ocsp \
	testarg-dev-o-saft_--colour-line

# special option for gen_standalone.sh; must remove the generated file
# generated file has permissions 555, hence  rm -f
# TODO: target works but gen_standalone.sh returns errors (needs to be improved)
testarg-dev-usr-standalone-tmp: EXE.pl    = $(O-DIR.usr)/gen_standalone.sh
testarg-dev-usr-standalone-tmp: TEST.args = $(_TEST.dev.tmpfile)
testarg-dev-usr-standalone_tmpfile: testarg-dev-usr-standalone-tmp
	@rm -f $(_TEST.dev.tmpfile)

ALL.test.dev            += testarg-dev-usr-standalone_tmpfile


# targets: EXE.* --help
test.dev.help.all:  $(ALL.test.dev.help)
test.dev.help.log:  $(ALL.test.dev.help:%=%.log)

# targets: EXE.pl = perlpod
test.dev.pod.all:   $(ALL.test.dev.pod)
test.dev.pod.log:   $(ALL.test.dev.pod:%=%.log)

# useless generated targets (as these are shell not perl programs)
# disabled target produces then: make 'testarg-dev-...' is up to date.
testarg-dev-o-saft_pod:
	@$(O-TRACE.target)
testarg-dev-o-saft-docker_pod:
	@$(O-TRACE.target)
testarg-dev-usr-openssl_pod:
	@$(O-TRACE.target)
testarg-dev-INSTALL.sh_pod:
	@$(O-TRACE.target)

#_____________________________________________________________________________
#______________________________________________ special targets for testing __|

HELP-_dev3          = _____________________________________ some special targets _
HELP-testarg-dev-grep_subs  = list perl function definitions from '$(LIST.sources)'
HELP-testarg-dev-grep_desc  = same as testarg-dev-grep_subs but with description
HELP-testarg-dev-grep_flow  = show flow of functionality in '$(LIST.sources)'
HELP-testarg-dev-grep_hint  = list all OCfg::hint() from '$(LIST.sources)'
HELP-testarg-dev-grep_warn  = list all OCfg::warn() from '$(LIST.sources)'
HELP-testarg-dev-grep_sub   = list all subs from '$(SRC.pl)'
HELP-testarg-dev-o-saft_notyet  = test for 'NOT YET IMPLEMENTED' commands
HELP-test.dev.grep.sub      = alias for testarg-dev-grep_sub
HELP-test.dev.grep.subs     = alias for testarg-dev-grep_subs
HELP-test.dev.grep.desc     = alias for testarg-dev-grep_desc
HELP-test.dev.grep.hint     = alias for testarg-dev-grep_hint
HELP-test.dev.grep.warn     = alias for testarg-dev-grep_warn
HELP-test.dev.grep.all      = all targets testarg-dev-grep_*

# extract from our source (information for developers)
# TODO: need to generate individual targets
testarg-dev-grep_subs:
	@$(O-TRACE.target)
	@$(foreach prg, $(LIST.sources), echo "" && echo "# egrep '^[[:space:]]*sub[[:space:]]' $(prg) ..." && cd $(TEST.dir)&&egrep '^[[:space:]]*sub[[:space:]]' $(prg); )
testarg-dev-grep_desc:
	@$(O-TRACE.target)
	@$(foreach prg, $(LIST.sources), echo "" && echo "# egrep '^((#___*|sub|our|proc)[[:space:]]|[[:space:]]+#[?])' $(prg) | egrep -v '(SID_)' ..." && cd $(TEST.dir)&&egrep -s '^((#___*|sub|our|proc)[[:space:]]|[[:space:]]+#[?])' $(prg) | egrep -v '(SID_)'; )
testarg-dev-grep_flow:
	@$(O-TRACE.target)
	@$(foreach prg, $(LIST.sources), echo "" && echo "# egrep '^[[:space:]]*#[|]' $(prg) ..." && cd $(TEST.dir)&&egrep -s '^[[:space:]]*#[|]' $(prg); )
_TEST.brace=(
# ) beat Make's foreach dragon
testarg-dev-grep_hint:
	@$(O-TRACE.target)
	@$(foreach prg, $(LIST.sources), echo "" && echo "# grep 'OCfg::hint$(_TEST.brace)' $(prg) ..." && cd $(TEST.dir)&&grep -H '_hint$(_TEST.brace)' $(prg) |sed -e 's/: */\t/'; )
testarg-dev-grep_warn:
	@$(O-TRACE.target)
	@$(foreach prg, $(LIST.sources), echo "" && echo "# grep 'OCfg::warn$(_TEST.brace)' $(prg) ..." && cd $(TEST.dir)&&grep -H 'OCfg::warn$(_TEST.brace)' $(prg) |sed -e 's/: */\t/'; )
# TODO: all above $(foreach ...) requires a ; at end, which may fail on Windows

# function definitions more beautified for $(SRC.pl)
EXE.grep-sub   := perl -lane '\
		sub p{printf("%-24s\t%s\n",@_);} \
		($$F[0]=~/^\#/)&&do{$$_=~s/^\s*\#\??/-/;p($$s,$$_)if($$s ne "");$$s="";}; \
		($$F[0] eq "sub")&&do{p($$s,"")if($$s ne "");$$s=$$F[1];} \
	'
    # NOTE: $$ and \# in perl code is contribution to Makefile

testarg-dev-grep_sub:
	@echo "#make: print all subs  in $(SRC.pl) ..."
	@echo ""
	@echo "# function name                 | description"
	@echo "#-------------------------------+------------------------------------------"
	@$(EXE.grep-sub) $(SRC.pl)
	@echo "#-------------------------------+------------------------------------------"
	@echo ""

ALL.test.dev.grep   = testarg-dev-grep_subs testarg-dev-grep_desc \
	testarg-dev-grep_flow testarg-dev-grep_sub \
	testarg-dev-grep_hint testarg-dev-grep_warn
test.dev.grep.all:  $(ALL.test.dev.grep)
.PHONY: $(ALL.test.grep)
#.PHONY: $(ALL.test.grep:%=%.log)

# some special targets
testarg-dev-o-saft_notyet:  TEST.dev.hosts  = localhost
testarg-dev-o-saft_notyet:
	@$(O-TRACE.target)
	@cd $(TEST.dir) && $(EXE.pl) --norc --header $(TEST.dev.hosts) $(LIST.o-saft.notyet)

test.dev.grep.sub:  testarg-dev-grep_sub
test.dev.grep.subs: testarg-dev-grep_subs
test.dev.grep.desc: testarg-dev-grep_desc
test.dev.grep.hint: testarg-dev-grep_hint
test.dev.grep.warn: testarg-dev-grep_warn

ALL.test.dev.misc   = testarg-dev-o-saft_notyet

#ALL.test.dev       += $(ALL.test.dev.help) $(ALL.test.dev.pod) # pdocuses duplicate
ALL.test.dev       += $(ALL.test.dev.grep) $(ALL.test.dev.misc) \
                      $(ALL.test.dev.o-saft-mode) $(ALL.test.dev.o-saft-post)
ALL.test.dev.log    = $(ALL.test.dev:%=%.log)

test.dev.log-compare:   TEST.target_prefix  = testarg-dev-
test.dev.log-move:      TEST.target_prefix  = testarg-dev-
test.dev.log:           TEST.target_prefix  = testarg-dev-

test.dev:           $(ALL.test.dev)
test.dev.log:       $(ALL.test.dev.log) test.log-compare-hint
