#!/usr/bin/make -rRf
#?
#? DESCRIPTION
#?      For more details please see
#?          ../Makefile  Makefile  Makefile.help  Makefile.pod
#?      make help.test.docker
#?
#? VERSION
#?      @(#) Makefile.docker 3.9 24/05/31 13:02:55
#?
#? AUTHOR
#?      19-dec-19 Achim Hoffmann
#?
# -----------------------------------------------------------------------------

HELP-help.test.docker = targets for testing $(O-Project)-docker

_SID.docker        := 3.9

_MYSELF.docker     := t/Makefile.docker
ALL.includes       += $(_MYSELF.docker)
ALL.inc.type       += docker
ALL.help.tests     += help.test.docker

first-docker-target-is-default: help.test.docker

ifeq (,$(_SID.test))
    -include t/Makefile
endif

TEST.docker.hosts   =
ifdef TEST.hosts
  TEST.docker.hosts = $(TEST.hosts)
endif

help.test.docker:       HELP_TYPE   = docker
help.test.docker-v:     HELP_TYPE   = docker
help.test.docker-vv:    HELP_TYPE   = docker


HELP-_docker1       = _______________ testing o-saft-docker and o-saft in docker _
HELP-test.docker    = test functionality of '$(EXE.o_docker)'
HELP-test.docker.log = same as test.docker but store output in '$(TEST.logdir)/'

HELP.docker     = $(_NL)\
\# Testing docker functionality consist of two parts:$(_NL)\
\#    - building, installing, pushing the docker image$(_NL)\
\#    - testing the docker image$(_NL)\
\# This Makefile is about testing '$(EXE.o_docker)' working with the docker image.$(_NL)\
\# Examples:$(_NL)\
\#    $(MAKE_COMMAND) testarg-docker-status$(_NL)\
\#    $(MAKE_COMMAND) testarg-docker-call-env

HELP.test.docker.all = # no special documentation yet

LIST.docker.opts    = -help +V  inspect     status      usage   hacker
    # TODO: build apk rmi gui sshx shell root cp
# in following: = used to simulate a space, see $(subst =, ,) below
LIST.docker.call    = -list     call=env    call=pwd    call=id \
		      call=o-saft-docker    call=ls     call=ls=usr
LIST.docker.tool    = +VERSION  +version    +quit=--traceARG=localhost

# SEE Make:target name
# SEE Make:target name prefix

ifndef docker-macros-generated
    _LIST.docker.all = $(LIST.docker.opts) $(LIST.docker.call) $(LIST.docker.tool)
    _target=testarg-docker-$(subst =,-,$(arg))
    $(foreach arg, $(_LIST.docker.all),\
        $(eval $(_target): TEST.args = $(subst =, ,$(arg)) )\
        $(eval ALL.test.docker += $(_target) ) \
    )
    undefine _target
    undefine _LIST.docker.all
endif

# special target
testarg-docker-:        EXE.pl      = ../$(EXE.o_docker)
testarg-docker-:        TEST.args   =

testarg-docker-%.log:   EXE.log-filterarg  = sed -e 's@\(HOSTNAME\)=.*@\1=$(TEST.logtxt)@'
testarg-docker-%:       EXE.pl      = ../$(EXE.o_docker)
testarg-docker-%:       TEST.init   =

ALL.test.docker    += testarg-docker-
ALL.test.docker.log = $(ALL.test.docker:%=%.log)

test.docker.log-compare:TEST.target_prefix  = testarg-docker-
test.docker.log-move:   TEST.target_prefix  = testarg-docker-
test.docker.log:        TEST.target_prefix  = testarg-docker-

test.docker:     $(ALL.test.docker)
test.docker.log: $(ALL.test.docker.log) test.log-compare-hint

HELP-_mbedtls       = _________________________ docker image for Mbed TLS server _
HELP-mbedtls.build  = build docker image '$(TEST.mbedtls.image)' form '$(SRC.mbedtls.dockerfile)'
HELP-mbedtls.runtls = start docker image '$(TEST.mbedtls.image)' listening for  TLS
HELP-mbedtls.rundtls= start docker image '$(TEST.mbedtls.image)' listening for DTLS
HELP-mbedtls.inspect= inspect docker image '$(TEST.mbedtls.image)'
HELP-mbedtls.shell  = give a shell in docker image '$(TEST.mbedtls.image)'
HELP-mbedtls.kill   = kill running container of image '$(TEST.mbedtls.image)'
HELP-mbedtls.rmi    = delete docker image '$(TEST.mbedtls.image)'
HELP-mbedtls.help   = show help of ssl_server in docker image '$(TEST.mbedtls.image)'
HELP-"              = mbedtls.* targets are not part of target test and test.log
#  dirty hack  HELP-"   which adds a simple text line for help
# Mbed TLS is a server for testing only, hence all targets are named without test* prefix
SRC.mbedtls.dockerfile  = $(O-USR.dir)/Dockerfile.mbedtls
TEST.mbedtls.image      = mbedtls
mbedtls.build:
	@$(TRACE.target)
	@$(EXE.docker) build --rm --force-rm -f $(SRC.mbedtls.dockerfile) . --tag $(TEST.mbedtls.image)
mbedtls.shell:
	@$(TRACE.target)
	@$(EXE.docker) run   --rm -it -p 4433:4433 -p 4433:4433/udp --entrypoint=/bin/sh $(TEST.mbedtls.image)
mbedtls.rundtls:
	@$(TRACE.target)
	@$(EXE.docker) run   --rm     -p 4433:4433 -p 4433:4433/udp $(TEST.mbedtls.image) force_version=dtls1_2
mbedtls.runtls:
	@$(TRACE.target)
	@$(EXE.docker) run   --rm     -p 4433:4433 -p 4433:4433/udp $(TEST.mbedtls.image)
mbedtls.run: mbedtls.runtls
mbedtls.kill:
	@$(TRACE.target)
	@$(EXE.docker) kill `docker ps -a --format "{{.ID}} {{.Image}}"|awk '/$(TEST.mbedtls.image)/{print $$1}'`
mbedtls.rmi:
	@$(TRACE.target)
	@$(EXE.docker) rmi `docker image ls $(TEST.mbedtls.image) -q`
mbedtls.help:
	@$(TRACE.target)
	@$(EXE.docker) run   --rm -it --entrypoint=/mbedtls/bin/mbedtls_ssl_server2 $(TEST.mbedtls.image) --help
mbedtls.inspect:
	@$(TRACE.target)
	@$(EXE.docker) inspect $(TEST.mbedtls.image)

ALL.mbedtls         = mbedtls.build mbedtls.run mbedtls.kill mbedtls.rmi mbedtls.shell mbedtls.help mbedtls.inspect
# mbedtls.all:      $(ALL.mbedtls)  # target dangerous and doesn't make any sense
